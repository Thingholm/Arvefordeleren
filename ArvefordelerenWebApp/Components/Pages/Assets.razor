@page "/aktiver"

<PageTitle>Aktiver</PageTitle>

<h1>Aktiver</h1>

<table>
    <thead>
        <tr>
            <th>Aktiv</th>
            <th>Værdi</th>
            <th>Likvid</th>
            <th>Rediger</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Asset asset in assets)
        {
            <tr>
                @if (editingAsset == asset)
                {
                    <td>
                        <InputText @bind-Value="asset.Name" />
                    </td>
                    <td>
                        <InputNumber @bind-Value="asset.Value" />
                    </td>
                    <td>
                        <InputCheckbox @bind-Value="asset.Liquid" />
                    </td>
                    <td>
                        <button @onclick="SaveEdit">Gem</button>
                        <button @onclick="CancelEdit">Annuller</button>
                    </td>
                }
                else
                {
                    <td>@asset.Name</td>
                    <td>@asset.Value</td>
                    <td>@(asset.Liquid ? "x" : "")</td>
                    <td>
                        <button @onclick="() => handleDeleteAsset(asset)">Slet</button>
                        <button @onclick="() => StartEdit(asset)">Rediger</button>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

<button>Tilføj aktiv</button>

<div>
    <EditForm Model="newAsset" OnSubmit=@handleAddAssetSubmit FormName="FormAktiv">
        <DataAnnotationsValidator />
        <label>
            Aktiv
            <InputText @bind-Value="newAsset.Name" />
            <ValidationMessage For="() => newAsset.Name" />
        </label>

        <label>
            Værdi
            <InputNumber @bind-Value="newAsset.Value" />
        </label>

        <label>
            Likvid
            <InputCheckbox @bind-Value="newAsset.Liquid" />
        </label>
        <button type="Submit">Tilføj</button>
    </EditForm>
</div>

@code 
{
    private List<Asset> assets = AssetsRepository.GetAssets();
    private Asset? editingAsset = null;
    [SupplyParameterFromForm]
    private Asset newAsset { get; set; } = new Asset();

    private void handleDeleteAsset(Asset asset)
    {
        AssetsRepository.DeleteAsset(asset);
        assets = AssetsRepository.GetAssets();
    }

    private void StartEdit(Asset asset)
    {
        editingAsset = asset;
    }

    private void CancelEdit()
    {
        editingAsset = null; 
    }

    private void SaveEdit()
    {
        if (editingAsset != null)
        {
            
            AssetsRepository.UpdateAsset(editingAsset);
            assets = AssetsRepository.GetAssets();
            editingAsset = null; 
        }
    }

    private void handleAddAssetSubmit(EditContext editContext)
    {
        ValidationMessageStore validationMessageStore = new ValidationMessageStore(editContext);
        FieldIdentifier nameField = editContext.Field(nameof(newAsset.Name));
        validationMessageStore.Clear();

        if (string.IsNullOrEmpty(newAsset.Name))
        {
            validationMessageStore.Add(nameField, "Fejl, mangler at udfylde aktiv feltet");
            return;
        }

        AssetsRepository.AddAsset(newAsset);
        assets = AssetsRepository.GetAssets();
        newAsset = new Asset();
    }
}
