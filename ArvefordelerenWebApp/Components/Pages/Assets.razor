@page "/aktiver"
@rendermode InteractiveServer

<PageTitle>Aktiver</PageTitle>

<h1>Aktiver</h1>

<table>
    <thead>
        <th>Aktiv</th>
        <th>Værdi</th>
        <th>Likvid</th>
    </thead>
    <tbody>
        @foreach (Asset asset in assets)
        {
            <tr>
                <td>@asset.Name</td>
                <td>@asset.Value</td>
                <td>@(asset.Liquid ? "x" : "")</td>
                <td><button @onclick="() => handleDeleteAsset(asset)">Slet</button></td>
            </tr>
        }
    </tbody>
</table>

<button>Tilføj aktiv</button>

<div>
    <EditForm Model="newAsset" OnSubmit=@handleAddPersonSubmit>
        <label>
            Aktiv
            <InputText @bind-Value="newAsset!.Name"></InputText>
            <ValidationMessage For="() => newAsset!.Name"/>
        </label>

        <label>
            Værdi
            <InputNumber @bind-Value="newAsset.Value"></InputNumber>
        </label>
        
        <label>
            Likvid
            <InputCheckbox @bind-Value="newAsset.Liquid"></InputCheckbox>   
        </label>
        <button type="submit">Tilføj</button>
    </EditForm>
</div>

@code 
{
    private List<Asset> assets = AssetsRepository.GetAssets();

    private void handleDeleteAsset(Asset asset)
    {
        AssetsRepository.DeleteAsset(asset);
        
        assets = AssetsRepository.GetAssets();
    }

    private Asset newAsset = new Asset(); 
    private void handleAddPersonSubmit(EditContext editContext)
    {
        ValidationMessageStore validationMessageStore = new ValidationMessageStore(editContext);
        FieldIdentifier nameField = editContext.Field(nameof(newAsset.Name));
        validationMessageStore.Clear();
        
        if (string.IsNullOrEmpty(newAsset!.Name)) 
        {
            validationMessageStore.Add(nameField, "Fejl, mangler at udfylde aktiv feltet");
            return;
        }

        AssetsRepository.AddAsset(newAsset);
        assets = AssetsRepository.GetAssets();

        newAsset = new Asset();
    }
}