@rendermode InteractiveServer

<Button Color="Color.Primary" @onclick="() => modalRef.Show()"><Icon Name="IconName.Add"/> <span class="ms-1">Tilføj arving</span></Button>

<Modal @ref="modalRef">
    <ModalContent>
        <ModalHeader>Tilføj arving <CloseButton class="me-1"/> </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Mode="ValidationMode.Manual" Model="newInheritor" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Navn på arving</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="newInheritor.Name">
                                <Feedback>
                                    <ValidationError>Indtast venligst et navn</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>

                <Validation Validator=validateInheritorClassSelect>
                    <Field>
                        <FieldLabel>Arveklasse</FieldLabel>
                        <FieldBody>
                            <Select TValue=InheritorType @bind-SelectedValue=newInheritor.InheritorType>
                                <SelectItem value="@(InheritorType.TypeEmpty)">- Vælg venligst en arveklasse -</SelectItem>
                                <SelectItem value="@(InheritorType.Type1)">@((int)InheritorType.Type1)</SelectItem>
                                <SelectItem value="@(InheritorType.Type2)">@((int)InheritorType.Type2)</SelectItem>
                                <SelectItem value="@(InheritorType.Type3)">@((int)InheritorType.Type3)</SelectItem>
                            </Select>
                        </FieldBody>
                    </Field>
                </Validation>
            </Validations>

            <Field>
                <FieldBody>
                    <Check TValue="bool" @bind-Checked="newInheritor.InheritsFreeInheritance">
                        Del i friarv
                    </Check>
                    @if (newInheritor.InheritsFreeInheritance)
                    {
                        <NumericEdit TValue="decimal?" @bind-Value="newInheritor.FreeInheritancePercentage" Placeholder="Indtast procent">
                            <Feedback>
                                <ValidationError>Indtast venligst en gyldig procentdel</ValidationError>
                            </Feedback>
                        </NumericEdit>
                        
                        @if (!string.IsNullOrEmpty(validationErrorMessage))
                        {
                            <div class="text-danger">@validationErrorMessage</div>
                        }
                    }
                </FieldBody>
            </Field>
            
            <Field>
                <FieldBody>
                    <Dropdown>
                        <DropdownToggle Color="Color.Light">
                            Udtagelsesret til aktiver
                        </DropdownToggle>
                        <DropdownMenu>
                            @foreach(Asset asset in Assets.Where(asset => !asset.Liquid))
                            {
                                <DropdownItem
                                        ShowCheckbox
                                        Checked=@(asset.RightOfWithdrawal?.Id == newInheritor.Id)
                                        CheckedChanged="() => handleCheckedChange(asset, newInheritor)"
                                        Disabled=@(asset.RightOfWithdrawal != null && asset.RightOfWithdrawal?.Id != newInheritor.Id)
                                    >
                                        @asset.Name @((asset.RightOfWithdrawal != null && asset.RightOfWithdrawal?.Id != newInheritor.Id) ? $"({asset.RightOfWithdrawal?.Name})" : "")
                                    </DropdownItem>
                            }
                        
                        </DropdownMenu>
                    </Dropdown>
                </FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" @onclick="addInheritor">Tilføj</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code 
{
    private string? validationErrorMessage;
    [Parameter]
    public List<Inheritor> Inheritors { get; set; } = new List<Inheritor>();
    [Parameter]
    public EventCallback<List<Inheritor>> InheritorsChanged { get; set; }
    [Parameter]
    public Inheritor newInheritor { get; set;} = new Inheritor();
    
    [Parameter]
    public List<Asset> Assets { get; set; } = new List<Asset>();
    
    [Parameter]
    public EventCallback<List<Asset>> AssetsChanged { get; set; }

    private Modal modalRef = new Modal();
    private Validations validationsRef { get; set; } = new Validations();
    private async Task addInheritor()
    {
        validationErrorMessage = ValidateInheritancePercentage();
        if (validationErrorMessage != null)
        {
            return;
        }
        
        if (await validationsRef.ValidateAll())
        {
            InheritorRepository.AddInheritor(newInheritor);
            List<Inheritor> newInheritors = InheritorRepository.GetInheritors();
            await InheritorsChanged.InvokeAsync(newInheritors);

            newInheritor = new Inheritor();

            await validationsRef.ClearAll();
            validationErrorMessage = null;
            modalRef?.Hide();
        }
    }

    private void validateInheritorClassSelect(ValidatorEventArgs e)
    {
        e.Status = (InheritorType)e.Value == InheritorType.TypeEmpty ? ValidationStatus.Error : ValidationStatus.Success;
    }

    private void handleCheckedChange(Asset asset, Inheritor inheritor)
    {
        if (asset.RightOfWithdrawal?.Id == inheritor.Id)
        {
            asset.RightOfWithdrawal = null;
            return;
        }

        asset.RightOfWithdrawal = inheritor;
    }

    private string? ValidateInheritancePercentage()
    {
        decimal totalPercentage = Inheritors
            .Where(i => i.InheritsFreeInheritance && i.FreeInheritancePercentage.HasValue)
            .Sum(i => i.FreeInheritancePercentage.GetValueOrDefault());

        if (newInheritor.FreeInheritancePercentage.HasValue)
        {
            totalPercentage += newInheritor.FreeInheritancePercentage.Value;
        }

        return totalPercentage > 100 ? $"Den samlede procentdel må ikke overstige 100%, lige nu er {totalPercentage}% brugt" : null;
    }
}