@rendermode InteractiveServer

<Button @onclick="() => modalRef.Show()"><Icon Name="IconName.Pen"/></Button>

<Modal @ref="modalRef">
    <ModalContent>
        <ModalHeader>Redigér Arving <CloseButton class="me-1"/> </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Mode="ValidationMode.Manual" Model="inheritorToEdit" ValidateOnLoad="false">
                <Fields>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Navn på arving:</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="inheritorToEdit.Name">
                                    <Feedback>
                                        <ValidationError>Indtast venligst navnet på arvingen</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Fields>

                <Fields>
                    <Field>
                        <FieldLabel>Arveklasse:</FieldLabel>
                        <FieldBody>
                            <Select TValue=InheritorType @bind-SelectedValue=inheritorToEdit.InheritorType>
                                <SelectItem value="@(InheritorType.Type1)">1</SelectItem>
                                <SelectItem value="@(InheritorType.Type2)">2</SelectItem>
                                <SelectItem value="@(InheritorType.Type3)">3</SelectItem>
                            </Select>
                        </FieldBody>
                    </Field>
                </Fields>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="() => cancelChanges()">Annullér ændringer</Button>
            <Button Color="Color.Primary" @onclick="() => saveChanges()">Gem ændringer</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code 
{
    [Parameter]
    public List<Inheritor> Inheritors { get; set; } = new List<Inheritor>();

    [Parameter]
    public EventCallback<List<Inheritor>> InheritorsChanged { get; set; }
    [Parameter]
    public Inheritor Inheritor { get; set; } = new Inheritor();
    private Inheritor inheritorToEdit = new Inheritor();
    private Modal modalRef = new Modal();

    private Validations validationsRef { get; set; } = new Validations();

    protected override void OnInitialized()
    {
        setInheritorToEdit();
    }

    private void setInheritorToEdit()
    {
        inheritorToEdit = new Inheritor
        {
            Id = Inheritor.Id,
            Name = Inheritor.Name,
            InheritorType = Inheritor.InheritorType,
        };
    }

    private async Task saveChanges()
    {
        if (await validationsRef.ValidateAll())
        {
            InheritorRepository.UpdateInheritor(inheritorToEdit);
            List<Inheritor> newInheritors = InheritorRepository.GetInheritors();
            await InheritorsChanged.InvokeAsync(newInheritors);

            await validationsRef.ClearAll();

            await modalRef.Hide();
        }
    }

    private void cancelChanges()
    {
        setInheritorToEdit();
        modalRef.Hide();
    }
}