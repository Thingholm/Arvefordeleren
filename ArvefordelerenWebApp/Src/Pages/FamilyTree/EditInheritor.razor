@rendermode InteractiveServer

<Button @onclick="() => onOpen()"><Icon Name="IconName.Pen"/></Button>

<Modal @ref="modalRef">
    <ModalContent>
        <ModalHeader>Redigér Arving <CloseButton class="me-1"/> </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Mode="ValidationMode.Manual" Model="inheritorToEdit" ValidateOnLoad="false">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Navn på arving:</FieldLabel>
                        <FieldBody>
                            <TextEdit @bind-Text="inheritorToEdit.Name">
                                <Feedback>
                                    <ValidationError>Indtast venligst navnet på arvingen</ValidationError>
                                </Feedback>
                            </TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>

                <Field>
                    <FieldLabel>Arveklasse:</FieldLabel>
                    <FieldBody>
                        <Select TValue=InheritorType @bind-SelectedValue=inheritorToEdit.InheritorType>
                            <SelectItem value="@(InheritorType.Type1)">1</SelectItem>
                            <SelectItem value="@(InheritorType.Type2)">2</SelectItem>
                            <SelectItem value="@(InheritorType.Type3)">3</SelectItem>
                        </Select>
                    </FieldBody>
                </Field>

                <Field>
                <FieldBody>
                    <Check TValue="bool" @bind-Checked="inheritorToEdit.InheritsFreeInheritance">
                        Del i friarv
                    </Check>
                    @if (inheritorToEdit.InheritsFreeInheritance)
                    {
                        <NumericEdit TValue="decimal?" @bind-Value="inheritorToEdit.FreeInheritancePercentage">
                            <Feedback>
                                <ValidationError>Indtast venligst en gyldig procentdel</ValidationError>
                            </Feedback>
                        </NumericEdit>
                        
                        @if (!string.IsNullOrEmpty(validationErrorMessage))
                        {
                            <div class="text-danger">@validationErrorMessage</div>
                        }
                    }
                </FieldBody>
            </Field>

                <Field>
                    <FieldBody>
                        <Dropdown>
                            <DropdownToggle Color="Color.Light">
                                Udtagelsesret til aktiver
                            </DropdownToggle>
                            <DropdownMenu>
                                @foreach(Asset asset in assetsToEdit.Where(asset => !asset.Liquid))
                                {
                                    <DropdownItem
                                        ShowCheckbox
                                        Checked=@(asset.RightOfWithdrawal?.Id == inheritorToEdit.Id)
                                        CheckedChanged="() => handleCheckedChange(asset, inheritorToEdit)"
                                        Disabled=@(asset.RightOfWithdrawal != null && asset.RightOfWithdrawal?.Id != inheritorToEdit.Id)
                                    >
                                        @asset.Name @((asset.RightOfWithdrawal != null && asset.RightOfWithdrawal?.Id != inheritorToEdit.Id) ? $"({asset.RightOfWithdrawal?.Name})" : "")
                                    </DropdownItem>
                                }
                            </DropdownMenu>
                        </Dropdown>
                    </FieldBody>
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="() => cancelChanges()">Annullér ændringer</Button>
            <Button Color="Color.Primary" @onclick="() => saveChanges()">Gem ændringer</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code 
{
    private string? validationErrorMessage;
    [Parameter]
    public List<Inheritor> Inheritors { get; set; } = new List<Inheritor>();
    [Parameter]
    public EventCallback<List<Inheritor>> InheritorsChanged { get; set; }

    [Parameter]
    public Inheritor Inheritor { get; set; } = new Inheritor();
    
    [Parameter]
    public List<Asset> Assets { get; set; } = new List<Asset>();
    [Parameter]
    public EventCallback<List<Asset>> AssetsChanged { get; set; }

    private Inheritor inheritorToEdit = new Inheritor();
    private List<Asset> assetsToEdit = new List<Asset>();

    private Modal modalRef = new Modal();
    private Validations validationsRef { get; set; } = new Validations();

    private void onOpen()
    {
        setInheritorToEdit();
        setAssetsToEdit();
        modalRef.Show();
    }

    private void setInheritorToEdit()
    {
        inheritorToEdit = new Inheritor
        {
            Id = Inheritor.Id,
            Name = Inheritor.Name,
            InheritorType = Inheritor.InheritorType,
            InheritsFreeInheritance = Inheritor.InheritsFreeInheritance,
            FreeInheritancePercentage = Inheritor.FreeInheritancePercentage
        };
    }

    private void setAssetsToEdit()
    {
        assetsToEdit = new List<Asset>();
        foreach(Asset asset in Assets)
        {
            assetsToEdit.Add
            (
                new Asset
                {
                    Id = asset.Id,
                    Name = asset.Name,
                    Value = asset.Value,
                    Liquid = asset.Liquid,
                    RightOfWithdrawal = asset.RightOfWithdrawal
                }
            );
        }
    }

    private async Task saveChanges()
    {
        validationErrorMessage = ValidateInheritancePercentage();
        if (validationErrorMessage != null)
        {
            return;
        }

        if (await validationsRef.ValidateAll())
        {
            InheritorRepository.UpdateInheritor(inheritorToEdit);
            List<Inheritor> newInheritors = InheritorRepository.GetInheritors();
            await InheritorsChanged.InvokeAsync(newInheritors);

            AssetsRepository.UpdateAssets(assetsToEdit);
            List<Asset> newAssets = AssetsRepository.GetAssets();
            await AssetsChanged.InvokeAsync(newAssets);

            await validationsRef.ClearAll();

            await modalRef.Hide();
        }
    }

    private void cancelChanges()
    {
        setInheritorToEdit();
        setAssetsToEdit();
        modalRef.Hide();
    }

    private void handleCheckedChange(Asset asset, Inheritor inheritor)
    {
        if (asset.RightOfWithdrawal?.Id == inheritor.Id)
        {
            asset.RightOfWithdrawal = null;
            return;
        }

        asset.RightOfWithdrawal = inheritor;
    }

    private string? ValidateInheritancePercentage()
    {
        decimal totalPercentage = Inheritors
            .Where(i => i.InheritsFreeInheritance && i.FreeInheritancePercentage.HasValue && i.Id != inheritorToEdit.Id)
            .Sum(i => i.FreeInheritancePercentage.GetValueOrDefault());

        if (inheritorToEdit.FreeInheritancePercentage.HasValue)
        {
            totalPercentage += inheritorToEdit.FreeInheritancePercentage.Value;
        }

        return totalPercentage > 100 ? $"Den samlede procentdel må ikke overstige 100%, lige nu er {totalPercentage}% brugt" : null;
    }
}