@rendermode InteractiveServer

<Button @onclick="() => modalRef.Show()"><Icon Name="IconName.Pen"/></Button>

<Modal @ref="modalRef">
    <ModalContent>
        <ModalHeader>Redigér aktiv <CloseButton class="me-1"/> </ModalHeader>
        <ModalBody>
            <Validations @ref="validationsRef" Mode="ValidationMode.Manual" Model="assetToEdit" ValidateOnLoad="false">
                <Fields>
                    <Validation Validator="ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Navn på aktiv</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="assetToEdit.Name">
                                    <Feedback>
                                        <ValidationError>Indtast venligst navnet på aktivet</ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Fields>

                <Fields>
                    <Field>
                        <FieldLabel>Værdi</FieldLabel>
                        <FieldBody>
                            <NumericEdit @bind-Value="assetToEdit.Value"/>
                        </FieldBody>
                    </Field>
                </Fields>

                <Fields>
                    <Field>
                        <FieldBody>
                            <Check TValue="bool" @bind-Checked="assetToEdit.Liquid">Kontant</Check>
                        </FieldBody>
                    </Field>
                </Fields>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" @onclick="() => cancelChanges()">Annulér ændringer</Button>
            <Button Color="Color.Primary" @onclick="() => saveChanges()">Gem ændringer</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code 
{
    [Parameter]
    public List<Asset> Assets { get; set; } = new List<Asset>();

    [Parameter]
    public EventCallback<List<Asset>> AssetsChanged { get; set; }
    [Parameter]
    public Asset Asset { get; set; } = new Asset();
    private Asset assetToEdit = new Asset();
    private Modal modalRef = new Modal();

    private Validations validationsRef { get; set; } = new Validations();

    protected override void OnInitialized()
    {
        setAssetToEdit();
    }

    private void setAssetToEdit()
    {
        assetToEdit = new Asset
        {
            Id = Asset.Id,
            Name = Asset.Name,
            Value = Asset.Value,
            Liquid = Asset.Liquid,
        };
    }

    private async Task saveChanges()
    {
        if (await validationsRef.ValidateAll())
        {
            AssetsRepository.UpdateAsset(assetToEdit);
            List<Asset> newAssets = AssetsRepository.GetAssets();
            await AssetsChanged.InvokeAsync(newAssets);

            await validationsRef.ClearAll();

            await modalRef.Hide();
        }
    }

    private void cancelChanges()
    {
        setAssetToEdit();
        modalRef.Hide();
    }
}